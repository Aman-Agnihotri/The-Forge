
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model users {
  id        String    @id @default(cuid())
  username  String    @unique @db.VarChar(50)
  email     String    @unique @db.VarChar(100)
  password  String?   @db.VarChar(255)                 // Only applicable for non-OAuth users
  createdAt DateTime  @default(now()) @db.Timestamp(6)
  updatedAt DateTime  @updatedAt @db.Timestamp(6)      //For Soft Deletion
  deletedAt DateTime? @db.Timestamp(6)
  providers user_provider[]                            // OAuth providers
  roles     user_role[]                               // Linked user roles

  @@map("users")
}

model user_provider {
  id           String   @id @default(cuid())
  providerName String   @db.VarChar(50)     // e.g., 'google', 'github', 'facebook'
  providerId   String   @db.VarChar(255)    // Unique ID from the provider (e.g., Google ID, GitHub ID, etc.)
  user         users    @relation(fields: [userId], references: [id])
  userId       String                       // Foreign key to User
  createdAt    DateTime @default(now()) @db.Timestamp(6)

  @@unique([providerName, providerId])      // Ensure no duplicate provider accounts
  @@unique([userId, providerName])          // Ensure that a user can only link each provider once
}

model roles {
  id        String    @id @default(cuid())
  name      String    @unique @db.VarChar(50) // e.g., 'admin', 'user'
  users     user_role[]                      // Users linked to the role
}

model user_role {
  id         String    @id @default(cuid())
  user       users     @relation(fields: [userId], references: [id])
  userId     String
  role       roles     @relation(fields: [roleId], references: [id])
  roleId     String
  assignedAt DateTime  @default(now()) @db.Timestamp(6) // When the role was assigned

  @@unique([userId, roleId])                 // Ensure each user has unique role assignments
}